#!/usr/bin/env node

'use strict';

const mountebank = require('../src/mountebank'),
    api = require('../src/cli/api'),
    cli = require('../src/cli/cli'),
    fs = require('fs-extra'),
    Q = require('q');

function processExists (pid) {
    try {
        // "As a special case, signal 0 can be used to test existence of process"
        // https://nodejs.org/api/process.html#process_process_kill_pid_signal
        process.kill(pid, 0);
        return true;
    }
    catch (e) {
        return false;
    }
}

function serverAt (options) {
    function start () {
        mountebank.create(options).then(server => {
            function shutdown () {
                server.close(() => {
                    try {
                        if (fs.existsSync(options.pidfile)) {
                            fs.unlinkSync(options.pidfile);
                        }
                    }
                    finally {
                        process.exit();
                    }
                });
            }

            process.on('SIGINT', shutdown);
            process.on('SIGTERM', shutdown);

            if (options.configfile) {
                return api.loadConfig(options, server);
            }
            else {
                return Q();
            }
        }).then(() => {
            // Useful for build plugins that need to wait for mb to be fully initialized
            // They can wait for the pidfile to be written
            fs.writeFileSync(options.pidfile, process.pid.toString());
        }).done();
    }

    function stop () {
        if (!fs.existsSync(options.pidfile)) {
            return Q(true);
        }

        const pid = fs.readFileSync(options.pidfile);
        if (!processExists(pid)) {
            fs.unlinkSync(options.pidfile);
            return Q(true);
        }

        const deferred = Q.defer(),
            startTime = new Date(),
            timeout = 1000,
            waitForClose = () => {
                const elapsedTime = new Date() - startTime;
                if (!fs.existsSync(options.pidfile)) {
                    deferred.resolve();
                }
                else if (elapsedTime > timeout) {
                    try {
                        // For Windows, which doesn't register signal handlers
                        fs.unlinkSync(options.pidfile);
                    }
                    catch (err) { /* ignore */ }
                    finally {
                        deferred.resolve();
                    }
                }
                else {
                    setTimeout(waitForClose, 100);
                }
            };

        process.kill(pid);
        waitForClose();
        return deferred.promise;
    }

    function restart () {
        stop().then(start).done();
    }

    return {
        start: start,
        stop: () => { stop().done(() => { process.exit(); }); },
        restart: restart,
        save: () => api.save(options),
        replay: () => api.replay(options)
    };
}

try {
    const server = serverAt(cli.args);

    switch (cli.command) {
        case 'start':
            server.start();
            break;
        case 'stop':
            server.stop();
            break;
        case 'restart':
            server.restart();
            break;
        case 'save':
            server.save();
            break;
        case 'replay':
            server.replay();
            break;
        case 'help':
            cli.help();
            break;
        default:
            cli.error(`Invalid command '${cli.command}'.`);
            break;
    }
}
catch (err) {
    cli.error(err.message);
}
